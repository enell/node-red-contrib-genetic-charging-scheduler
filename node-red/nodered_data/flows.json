[{"id":"49233989c464a93b","type":"tab","label":"Flow 1","disabled":false,"info":"","env":[]},{"id":"bf79fb519178f735","type":"inject","z":"49233989c464a93b","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":120,"y":300,"wires":[["39ce9f239ac6a352"]]},{"id":"39ce9f239ac6a352","type":"function","z":"49233989c464a93b","name":"function 1","func":"const HOURS = 48;\nconst now = new Date();\nnow.setMinutes(0, 0, 0);\n\nconst priceData = [];\nconst consumptionForecast = [];\nconst productionForecast = [];\n\nfor (let i = 0; i < HOURS; i++) {\n    const d = new Date(now.getTime() + i * 3600 * 1000);\n    const hour = d.getHours();\n    const utcHour = d.getUTCHours();\n\n    // Price curve: higher in morning/evening, lower at night\n    const priceBase = 0.65;\n    const pricePeak = 0.85;\n    const price =\n        priceBase +\n        (pricePeak - priceBase) *\n        (Math.sin(((hour - 7) / 24) * 2 * Math.PI) * 0.5 + 0.5) +\n        (Math.random() - 0.5) * 0.01;\n\n    // Consumption curve: higher in morning and evening, lower at night\n    const consBase = 0.4;\n    const consPeak = 1.2;\n    const cons =\n        consBase +\n        (consPeak - consBase) *\n        (Math.sin(((hour - 6) / 24) * 2 * Math.PI) * 0.5 + 0.5) +\n        (Math.random() - 0.5) * 0.05;\n\n    // Production curve: only daylight hours, bell curve peaking at noon\n    let prod = 0;\n    if (utcHour >= 5 && utcHour <= 17) {\n        const daylightHour = utcHour - 5;\n        const prodPeak = 2.8;\n        // Bell curve centered at 6 (noon), width ~6 hours\n        prod =\n            prodPeak *\n            Math.exp(-Math.pow(daylightHour - 6, 2) / (2 * Math.pow(3, 2))) +\n            (Math.random() - 0.5) * 0.05;\n        prod = Math.max(0, prod);\n    }\n\n    priceData.push({\n        start: d.toISOString(),\n        importPrice: +price.toFixed(4),\n        exportPrice: +(price * 0.82).toFixed(4),\n    });\n\n    consumptionForecast.push({\n        start: d.toISOString(),\n        value: +cons.toFixed(8),\n    });\n\n    productionForecast.push({\n        start: d.toISOString(),\n        value: +prod.toFixed(3),\n    });\n}\n\nconst soc = (80 + Math.random() * 20).toFixed(1);\n\nmsg.payload = {\n    priceData,\n    productionForecast,\n    consumptionForecast,\n    soc,\n};\n\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":300,"y":300,"wires":[["cb9017c9de39106e","30755f7dafddf99a"]]},{"id":"cb9017c9de39106e","type":"debug","z":"49233989c464a93b","name":"debug 1","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":540,"y":160,"wires":[]},{"id":"30755f7dafddf99a","type":"enell-strategy-genetic-charging","z":"49233989c464a93b","name":"","populationSize":20,"generations":400,"mutationRate":3,"numberOfPricePeriods":8,"batteryMaxEnergy":5,"batteryMaxInputPower":2.5,"batteryMaxOutputPower":2.5,"averageConsumption":1.5,"x":550,"y":300,"wires":[["58500c6cbc89460c"]]},{"id":"58500c6cbc89460c","type":"debug","z":"49233989c464a93b","name":"debug 2","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":820,"y":160,"wires":[]}]